
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
from dotenv import load_dotenv
import os
from openai import OpenAI
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from twilio.rest import Client as TwilioClient

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_key = os.getenv("OPENAI_API_KEY")
twilio_sid = os.getenv("TWILIO_ACCOUNT_SID")
twilio_token = os.getenv("TWILIO_AUTH_TOKEN")
twilio_whatsapp_number = os.getenv("TWILIO_WHATSAPP_NUMBER")

# –ö–ª–∏–µ–Ω—Ç—ã
gpt = OpenAI(api_key=api_key)
twilio = TwilioClient(twilio_sid, twilio_token)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
gc = gspread.authorize(creds)
sheet = gc.open_by_url("https://docs.google.com/spreadsheets/d/1Ov__Oej19B_a1EKc18pg3qYylfxRwu0ITFrkDpXg53Y")
faq_sheet = sheet.worksheet("FAQ")

# –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
context = {}

app = FastAPI()


def send_whatsapp_message(to, body):
    twilio.messages.create(
        from_=f"whatsapp:{twilio_whatsapp_number}",
        to=to,
        body=body
    )


@app.get("/")
def root():
    return {"status": "Bot is running ‚úÖ"}


@app.post("/webhook")
async def whatsapp_webhook(request: Request):
    form_data = await request.form()
    message = form_data.get("Body", "").strip()
    sender = form_data.get("From", "")

    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}: {message}")

    if not message:
        return PlainTextResponse("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞", status_code=400)

    try:
        faq_data = faq_sheet.get_all_records()
        found = False
        for row in faq_data:
            keywords = row.get("–í–æ–ø—Ä–æ—Å", "").lower().split("|")
            response = row.get("–û—Ç–≤–µ—Ç", "").strip()
            if any(keyword in message.lower() for keyword in keywords) and response:
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ '{keywords[0]}': {response}")
                send_whatsapp_message(sender, response)
                found = True

        if not found:
            print("ü§ñ –û—Ç–≤–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ ChatGPT...")
            chat_history = context.get(sender, [])
            chat_history.append({"role": "user", "content": message})

            gpt_response = gpt.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content":
                        "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç –∏–º–µ–Ω–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞. "
                        "–û—Ç–≤–µ—á–∞–π –ø–æ–Ω—è—Ç–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ –ø–æ —Ç–µ–º–∞–º: –∫—É—Ä—Å—ã, —Ü–µ–Ω—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ–±—É—á–µ–Ω–∏–µ, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã."}
                ] + chat_history
            )
            reply = gpt_response.choices[0].message.content.strip()
            print(f"ü§ñ –û—Ç–≤–µ—Ç –æ—Ç ChatGPT: {reply}")
            send_whatsapp_message(sender, reply)
            chat_history.append({"role": "assistant", "content": reply})
            context[sender] = chat_history[-10:]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π

        return PlainTextResponse("ok")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", str(e))
        send_whatsapp_message(sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ú—ã —Å–∫–æ—Ä–æ –≤—Å—ë –∏—Å–ø—Ä–∞–≤–∏–º üôè")
        return PlainTextResponse("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", status_code=500)
