from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse
from dotenv import load_dotenv
import os
from openai import OpenAI
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ª–∏—Å—Ç —Å FAQ
sheet = gc.open_by_url("https://docs.google.com/spreadsheets/d/1Ov__Oej19B_a1EKc18pg3qYylfxRwu0ITFrkDpXg53Y")
faq_sheet = sheet.worksheet("FAQ")

app = FastAPI()

@app.get("/")
def root():
    return {"status": "Bot is running ‚úÖ"}

@app.post("/webhook")
async def whatsapp_webhook(request: Request):
    form_data = await request.form()
    message = form_data.get("Body", "").strip()
    sender = form_data.get("From", "")

    print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}: {message}")

    if not message:
        return PlainTextResponse("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞", status_code=400)

    try:
        # –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        faq_data = faq_sheet.get_all_records()
        for row in faq_data:
            question = row.get("–í–æ–ø—Ä–æ—Å", "").strip().lower()
            answer = row.get("–û—Ç–≤–µ—Ç", "").strip()
            if question and question in message.lower():
                print(f"‚úÖ –û—Ç–≤–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω: {answer}")
                return PlainTextResponse(answer or "–û—Ç–≤–µ—Ç –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî ChatGPT
        print("ü§ñ –û—Ç–≤–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ ChatGPT...")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç –∏–º–µ–Ω–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞. "
                        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≥—Ä–∞–º–æ—Ç–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –≤ WhatsApp. "
                        "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ –∫—É—Ä—Å—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω—ã, —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã. "
                        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–π. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ —Ä–æ–±–æ—Ç."
                    )
                },
                {"role": "user", "content": message}
            ]
        )
        reply = response.choices[0].message.content.strip()
        print(f"ü§ñ –û—Ç–≤–µ—Ç –æ—Ç ChatGPT: {reply}")
        return PlainTextResponse(reply)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", str(e))
        return PlainTextResponse("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", status_code=500)
